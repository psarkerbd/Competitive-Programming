#include<bits/stdc++.h>

#define high 2147483648
#define sf scanf
#define pf printf
#define to_fast ios_base::sync_with_stdio(0)

using namespace std;

typedef long long LL;
typedef set<LL>sell;
typedef vector<LL>vll;

sell s;
vll two , three , ans;
LL anslen;

void storage(LL n, int p)
{
    LL res=1;

    for(int i=1; i<=p; i++)
    {
        if(res > high)
        {
            return;
        }

        else
        {
            res *= n;
        }
    }

    s.insert(res);

    if(n == 2)
    {
        two.push_back(res);
    }

    else
    {
        three.push_back(res);
    }
}

void small()
{
    LL i,j;

    for(i=1; i<32; i++)
    {
        storage(2 , i);
    }

    for(i=1; i<32; i++)
    {
        storage(3,i);
    }

    LL twolen = two.size(), threelen=three.size() , tmp;

    for(i=0;i<twolen;i++)
    {
        for(j=0;j<threelen;j++)
        {
            tmp = two[i] * three[j];
            if(tmp <= high)
            {
                s.insert(tmp);
            }
        }
    }

    sell::iterator it;
    //for(it=s.begin(); it!=s.end(); it++)cout << *it << "; ";
    for(it=s.begin(); it!=s.end(); it++)
    {
        ans.push_back(*it);
    }

    anslen = ans.size();

    //for(i=0;i<anslen;i++) cout << ans[i] << "; ";
}

LL search_binary(LL itm)
{
    LL lo=0, hi=anslen-1,mid;

    while(lo <= hi)
    {
        mid = (lo + hi) / 2;

        if(ans[mid] == itm)
        {
            return mid;
        }

        else if(ans[mid] > itm)
        {
            hi = mid-1;
        }

        else if(ans[mid] < itm)
        {
            lo = mid+1;
        }
    }

    return lo;
}

LL up_bound(LL itm)
{
    LL lo=0, hi=anslen-1 , mid;

    while(lo <= hi)
    {
        mid = (lo + hi) / 2;

        if(ans[mid] == itm)
        {
            lo = mid+1;
        }

        else if(ans[mid] > itm)
        {
            hi = mid-1;
        }

        else if(ans[mid] < itm)
        {
            lo = mid+1;
        }
    }

    return lo;
}

int main()
{
    small();
    //freopen("out.txt" , "w" , stdout);
    LL num;
    while(~sf("%lld",&num) and num)
    {
        if(num == 1)
        {
            pf("1\n");
            continue;
        }

        LL r = search_binary(num);

        if(ans[r] == num)
        {
            pf("%lld", num);
        }

        else
        {
            r = up_bound(num);

            pf("%lld",ans[r]);
        }

        pf("\n");
    }

    return 0;
}
