#include<cstdio>
#include<iostream>
#define sf scanf
#define pf printf
#define inf 999
#define nil -1
#define white 0
#define black 3
using namespace std;

int node,edge,W[100][100],cost[100],par[100],state[100];

void relax(int u, int v, int w)
{
    if(cost[v]>cost[u]+w)
    {
        cost[v] = cost[u]+w;
        par[v] = u;
    }
}

void initialize_single_source(int s)
{
    for(int i=1;i<=node;i++)
    {
        cost[i] = inf;
        par[i] = nil;
        state[i] = white;
    }

    cost[s] = 0;
}

int extract_min()
{
    int min_cost = inf;
    int min_ver = 0;

    for(int i=1;i<=node;i++)
    {
        if(state[i] == white and cost[i]<min_cost)
        {
            min_cost = cost[i];
            min_ver=i;
        }
    }

    return min_ver;
}

void Dijkstra(int s)
{
    int u;
    initialize_single_source(s);

    for(int i=1;i<=node;i++)
    {
        u = extract_min();

        state[u] = black;

        for(int j=1;j<=node;j++)
        {
            if(state[j]==white and W[i][j]!=inf)
            {
                relax(u,j,W[u][j]);
            }
        }
    }
}

void path(int s, int v)
{
    if(v == s)
    {
        pf("%d ",s);
    }

    else if(par[v] == nil)
    {
        pf("no path..");
    }

    else
    {
        path(s,par[v]);
        pf("%d ",v);
    }
}

int main()
{
    pf("Enter node and edge: ");
    sf("%d %d",&node,&edge);

    for(int i=0;i<=node;i++)
    {
        for(int j=0;j<=node;j++)
        {
            W[i][j] = inf;
        }
    }

    for(int i=1;i<=edge;i++)
    {
        int x,y,cost;
        sf("%d %d %d",&x,&y,&cost);

        W[x][y] = cost;
    }

    pf("Weight Matrix:\n");

    for(int i=1;i<=node;i++)
    {
        for(int j=1;j<=node;j++)
        {
            pf("%d ",W[i][j]);
        }

        pf("\n");
    }

    int src;

    pf("Enter start node: ");
    sf("%d",&src);

    Dijkstra(src);

    pf("parent array:\n");

    for(int i=1;i<=node;i++)pf("%d ",par[i]);

    int en;

    pf("Enter end node: ");
    sf("%d",&en);

    pf("path: ");
    path(src,en);
}
