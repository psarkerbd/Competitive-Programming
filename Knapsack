/// Header file begin
#include <iostream>
#include <cstdio>
#include <cstring>
#include <map>
#include <string>
#include <vector>
#include <cmath>
#include <cctype>
#include <sstream>
#include <set>
#include <list>
#include <stack>
#include<utility>
#include <queue>
#include <algorithm>
/// End
//..........
/// Macro
#define sf scanf
#define pf printf
#define sfint(a,b) scanf("%d %d",&a,&b)
#define sfl(a,b) scanf("%ld %ld",&a,&b)
#define sfll(a,b) scanf("%lld %lld",&a,&b)
#define sfd(a,b) scanf("%lf %lf",&a,&b)
#define sff(a,b) scanf("%f %f",&a,&b)
#define lp1(i,n) for(i=0;i<n;i++)
#define lp2(i,n) for(i=1;i<=n;i++)
#define mem(c,v) memset(c,v,sizeof(c))
#define cp(a) cout<<" "<<a<<" "<<endl
#define nl puts("")
#define sq(x) ((x)*(x))
#define all(x) x.begin(),x.end()
#define sz size()
#define gc getchar()
#define pb push_back
/// End.........

/// Size
#define mx7 20000100
#define mx6 1500000
#define mx5 100005
#define mx4 1000100
#define inf 1<<30                                           //infinity value
#define eps 1e-9
#define mx (65540)
#define mod 1000000007
#define pi acos(-1.0)

/// Macros for Graph

#define white 0
#define gray 1
#define black -1
#define nil -2

using namespace std;
//..................................................................................................................
typedef long long LL;
typedef long L;
typedef unsigned long long ull;
typedef unsigned long ul;
typedef unsigned int ui;
typedef pair<int, int> pii;

template<class T> T gcd(T a, T b ) {return b<=0?a:gcd(b,a%b);}
template<class T> T large(T a, T b ) {return a>b?a:b;}
template<class T> T small(T a, T b ) {return a<b?a:b;}
template<class T> T diffrnce(T a, T b) {return a-b<0?b-a:a-b;}

struct my
{
    int weight,price;
    double perunit;
};

int main()
{
    int mxweight,n;
    my ar[100],temp;

    cout << "Enter Maximum Weight: ";
    cin >> mxweight;

    cout << "\n Enter number of input: ";
    cin >> n;

    for(int i=0;i<n;i++)
    {
        cout << i+1 << ". Enter Weight and Price: ";
        cin >> ar[i].weight >> ar[i].price;

        ar[i].perunit = 1.00 * (ar[i].price / ar[i].weight);
    }

//    for(int i=0;i<n;i++)
//    {
//        cout << ar[i].weight << " " << ar[i].price << " " << ar[i].perunit << endl;
//    }

    // Bubble sort with descending order

    for(int i=0;i<n-1;i++)
    {
        for(int j=0;j<n-1-i;j++)
        {
            if(ar[j].perunit < ar[j+1].perunit)
            {
                temp = ar[j];
                ar[j] = ar[j+1];
                ar[j+1] = temp;
            }

            else if(ar[j].perunit == ar[j+1].perunit and ar[j].weight > ar[j+1].weight)
            {
                temp=ar[j];
                ar[j]=ar[j+1];
                ar[j+1] = temp;
            }
        }
    }

//    for(int i=0;i<n;i++)
//    {
//        cout << ar[i].weight << " " << ar[i].price << " " << ar[i].perunit << endl;
//    }

    double knap = 0.00;

    for(int i=0;i<n;i++)
    {
        if(mxweight >= ar[i].weight)
        {
            knap+=(ar[i].weight * ar[i].perunit) * 1.00;
            //cout << knap << endl;
            mxweight-=ar[i].weight;
        }

        else
        {
            knap+=(ar[i].perunit * mxweight)*1.00;
            break;
        }
    }

    cout << "\n>>Knapsack Solution " << endl << knap << "tk" << endl;

    return 0;
}
