// Accepted

#include <iostream>
#include <cstdio>
#include <cstring>
#include <map>
#include <string>
#include <vector>
#include <cmath>
#include <cctype>
#include <sstream>
#include <set>
#include <list>
#include <stack>
#include <queue>
#include <algorithm>
#define sf scanf
#define pf printf
#define sfint scanf ("%d %d",&a,&b)
#define sfl scanf ("%ld %ld",&a,&b)
#define sfll scanf ("%lld %lld",&a,&b)
#define sfd scanf ("%lf %lf",&a,&b)
#define sff scanf ("%f %f",&a,&b)
#define loop(i,n) for (i=0;i<n;i++)
#define LL long long
#define L long
#define nl puts("")
#define N 500000
#define fix 9999999
#define MOD 10000000007
#define pb push_back
#define pi acos(-1.0)
#define sz size()
#define gc getchar ()
#define ps push
#define clr clear
#define bn begin()
#define ed end()

using namespace std;

LL ar [N],swaps,i,j,k;

void merge (int p, int q, int r)
{
    int len1 = q-p+1;
    int len2 = r-q;

    vector <int> left;
    vector <int> right;

    for (i=0;i<len1;i++) left.pb (ar[p+i]);

    for (i=0;i<len2;i++) right.pb (ar[q+i+1]);

    left.pb (fix);
    right.pb (fix);

    int x=0,y=0;

    for (k=p;k<=r;k++)
    {
        if (left[x] <= right[y])
        {
            ar[k] = left[x++];
        }

        else
        {
            ar[k] = right[y++];

            swaps += len1 - x;
        }
    }
}

void merge_sort (int p, int r)
{
    int q;

    if (p < r)
    {
        q = (int) floor ((p + r) / 2.0);

        merge_sort(p,q);
        merge_sort(q+1,r);
        merge (p,q,r);
    }
}

int main ()
{
    LL n;

    while (1 == (sf ("%lld",&n)) and n!=0)
    {
        for (i=0;i<n;i++)
        {
            sf ("%lld",&ar[i]);
        }

        swaps = 0;

        merge_sort(0,n-1);

        //loop(i,n) pf ("%lld ",ar[i]);

        pf ("%lld\n",swaps);
    }

    return 0;
}
